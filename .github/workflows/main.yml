name: python-deployment

run-name: ${{ github.actor }} - ${{ github.ref_name}} -${{ github.sha }}

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PythonVersion: 3.8
  DockerImageName: todoapp

jobs:
  python-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PythonVersion }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PythonVersion }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python manage.py test

      - name: Generate Report
        run: |
          coverage run --source='.' manage.py test
          coverage report

      - name: Linting
        run: |
          flake8 . --show-source --statistics --exit-zero

      - name: Check Complexity
        run: |
          flake8 . --exit-zero --max-complexity=6

      - name: Upload python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-artifacts
          path: .

      - name: Upload helm artifacts
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: helm-artifacts
          path: ${{ github.workspace }}/helm-charts

  docker-ci:
    name: Build and Push Image
    runs-on: ubuntu-latest
    environment: developement
    if: ${{ github.ref_name == 'main' }}
    needs: python-ci
    steps:

    - uses: actions/download-artifact@v4
      name: Download python artifacts
      with:
        name: python-artifacts
        path: .

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        push: true
        context: ./src
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DockerImageName }}:${{ github.sha }}

  helm-ci:
    runs-on: ubuntu-latest
    needs: python-ci
    if: github.ref_name == 'main'
    name: Helm CI
    steps:

    - uses: actions/download-artifact@v4
      with:
        name: helm-artifacts
        path: .

    - name: Set Up Helm
      uses: azure/setup-helm@v4.2.0

    - name: Lint helm
      run: helm lint ./todoapp/

    - name: Template Helm
      run: helm template todoapp ./todoapp/ -f ./todoapp/values.yaml

    - name: Package Helm
      run: helm package ./todoapp

    - name: Upload Helm Artifact
      uses: actions/upload-artifact@v4
      with:
        name: helm-package
        path: ./*.tgz
  helm-deploy:
    runs-on: ubuntu-latest
    name: helm deploy
    environment: developement
    needs: [python-ci, helm-ci]
    steps:

    - uses: actions/download-artifact@v4
      with:
        name: helm-package
        path: .

    - uses: azure/setup-helm@v4.2.0
      name: Set Up Helm

    - uses: actions/download-artifact@v4
      with:
        name: helm-artifacts
        path: .
    - uses: actions/download-artifact@v4
      with:
        name: python-artifacts
        path: python-artifacts
    - uses: azure/setup-kubectl@v4
      name: setup kubectl
    - name: Checkout
      uses: actions/checkout@v4
    - name: List files for debug
      run: |
        echo "Current directory:"
        pwd
        echo "Listing files:"
        ls -R
    - name: kind cluster create
      uses: helm/kind-action@v1
      with:
        cluster_name: todoapp
        config: /cluster.yml
    - name: helm install dry run
      run: helm install todoapp ./helm-charts/todoapp/ --dry-run
    - name: helm install
      run: helm upgrade --install todoapp ./helm-charts/todoapp/ --atomic --wait --timeout 3600s --debug todoapp ./todoapp-*.tgz \
        -f ./todoapp/values.yaml \
        --set mysql.configs.MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}" \
        --set mysql.configs.MYSQL_USER="${{ secrets.MYSQL_USER }}" \
        --set mysql.configs.MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
        --set todoapp.secrets.DB_NAME="${{ secrets.DB_NAME }}" \
        --set todoapp.secrets.DB_USER="${{ secrets.DB_USER }}" \
        --set todoapp.secrets.DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
        --set todoapp.secrets.DB_HOST="${{ secrets.DB_HOST }}" \
        --set todoapp.secrets.SECRET_KEY="${{ secrets.SECRET_KEY }}" \
        --set todoapp.image.version="${{ github.sha }}"

